var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var session = require('express-session');

function create(config, callback) {
    var app = express();

    // Format according to mocha reporter indentation
    app.use(logger(process.env.NODE_ENV === 'test' ? '      :status :method :url' : 'dev'));

    // app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(cookieParser());
    app.use(config.session || session({
        secret: 'secretSessionWordGoesHere',
        // cookie: { maxAge: /*6000*/ /*60000*/ 600000 },
        resave: false,
        saveUninitialized: true
    }));

    // StatsD remote address descriptor
    function rinfo(tcpstream, data) {
        this.address = tcpstream.remoteAddress;
        this.port = tcpstream.remotePort;
        this.family = tcpstream.address().family;
        this.size = data.length;
    }

    // Serverio routes
    app.post(config.endpoint || '/serverio', serverio);
    app.get(config.endpoint || '/serverio', serverio);

    function serverio(req, res, next) {
        function handleData() {
            req.setEncoding('ascii');

            (req.session && req.session.views && req.session.views++) || (req.session.views = 1);
            console.log('session: ', req.sessionID, req.session.views);

            var buffer = req.body;
            console.log('buffer:', Object.keys(buffer)[0]);
            callback(Object.keys(buffer)[0], new rinfo(req.socket, buffer));
            res.end('');


            // var buffer = req.body;
            // console.log('buffer:', Object.keys(buffer)[0]);
            // callback(Object.keys(buffer)[0], new rinfo(req.socket, buffer));
            // // res.end('');
            //
            // // req.on('end', function (data) {
            // //     console.log('req.body:', req.body);
            // //     res.end('');
            // // });
            // res.end('');

            //
            // var buffer = '';
            // req.on('data', function (data) {
            //     buffer += data;
            // });
            // req.on('end', function (data) {
            //
            //     console.log('data: ', data, 'buffer:', buffer);
            //
            //     if (data) { buffer += data; }
            //     callback(buffer, new rinfo(req.socket, buffer));
            //     // res.statusCode = 401; res.end('error..');
            //     res.end('');
            // });
            // // res.end('');

            // var body = [];
            // req.on('data', function(chunk) {
            //     body.push(chunk);
            // })
            // req.on('end', function() {
            //     console.log('body: ', body);
            //
            //     // body = Buffer.concat(body).toString();
            //
            //     console.log('body: ', body);
            //
            //     // at this point, `body` has the entire request body stored in it as a string
            //     res.end('');
            // });
            // // res.end('');
        }

        if (config.auth && !req.session.auth) {
            console.log('Authorizing session: ', req.sessionID, 'token:', req.header('token'));

            config.auth.authorize(config, {token: req.header('token')}, function(err) {
                if (err) {
                    next({message: err, status: 401});
                }
                else {
                    req.session.auth = {time: new Date()}
                    handleData();
                }
            });
        }
        else {
            handleData();
        }
    }

    // catch 404 and forward to error handler
    app.use(function(req, res, next) {
      var err = new Error('Not Found');
      err.status = 404;
      next(err);
    });

    // error handlers

    // development error handler
    // will print stacktrace
    if (app.get('env') === 'development') {
      app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.json({status: err.status, message: err.message + " - dev"});
      });
    }

    // production error handler
    // no stacktraces leaked to user
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.json({/*status: {},*/ message: err.message});
    });

    return app;
}

module.exports = {
    create: create
};
