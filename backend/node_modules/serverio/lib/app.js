var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var is = require('type-is');
var session = require('express-session');
var router = express.Router();

function create(config, callback) {
    this.config = config;
    this.callback = callback;
    var self = this;
    var app = express();

    // Format according to mocha reporter indentation
    app.use(logger(process.env.NODE_ENV === 'test' ? '      :status :method :url' : 'dev'));

    app.use(bodyParser.json());
    app.use(bodyParser.raw());
    app.use(bodyParser.text());
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(cookieParser());
    app.use(config.session || session({
        secret: 'secretSessionWordGoesHere',
        // cookie: { maxAge: /*6000*/ /*60000*/ 600000 },
        resave: false,
        saveUninitialized: true
    }));

    // curl -H 'token:mySecretToken' 127.0.0.1:3000/serverio -w " %{http_code} " -d "foo:1|c"
    // echo '{foo:1,fn:c}' | curl -H 'token:mySecretToken' 127.0.0.1:3000/serverio -w " %{http_code} " --data-binary @-
    // curl -H 'token:mySecretToken' 127.0.0.1:3000/serverio -w " %{http_code} " -d '{"foo":"1","fn":"c}'
    // curl -H 'token:mySecretToken' 127.0.0.1:3000/serverio -w " %{http_code} " -d '{foo:1,fn:c}'

    // console.log('config.endpoint:', config, config.endpoint);
    // Serverio routes
    router.get('/', function(req, res, next) { serverio(req, res, next); });
    router.post('/', function(req, res, next) { serverio(req, res, next); });
    app.use(config.endpoint || '/serverio', router);


    // StatsD remote address descriptor
    function rinfo(tcpstream, data) {
        this.address = tcpstream.remoteAddress;
        this.port = tcpstream.remotePort;
        this.family = tcpstream.address().family;
        this.size = data.length;
    }

    function serverio(req, res, next) {
        function handleData() {
            // req.setEncoding('ascii');

            (req.session && req.session.views && req.session.views++) || (req.session.views = 1);
            console.log('session: ', req.sessionID, req.session.views);

            var contentType = is(req, ['text', 'json', 'urlencoded', 'multipart']);

            console.log('buffer:', req.body, 'content-type:', is(req), contentType);

            var buffer = req.body;
            // get content from parsed body
            if(contentType == 'urlencoded') buffer = Object.keys(buffer)[0]//.replace(s/\\n//g);
            else if (contentType == 'text') buffer = buffer;
            else if (contentType == 'json') buffer = buffer.tag + ':' + buffer.val + '|' + buffer.fn;

            console.log('buffer:', buffer);

            self.callback(buffer, new rinfo(req.socket, buffer));
            res.end('');
        }

        if (self.config.auth && !req.session.auth) {
            console.log('Authorizing session: ', req.sessionID, 'token:', req.header('token'));

            self.config.auth.authorize(self.config, {token: req.header('token')}, function(err) {
                if (err) {
                    next({message: err, status: 401});
                }
                else {
                    req.session.auth = {time: new Date()}
                    handleData();
                }
            });
        }
        else {
            handleData();
        }
    }

    // catch 404 and forward to error handler
    app.use(function(req, res, next) {
        var err = new Error('Not Found');
        err.status = 404;
        next(err);
    });

    // error handlers
    // development error handler will print stacktrace
    // production error handler no stacktraces leaked to user
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        app.get('env') === 'development' ?
        res.json({ status: err.status, message: err.message + " - dev" }) :
        res.json({ /*status: {},*/ message: err.message });
    });

    return app;
}

module.exports = {
    create: create
};
